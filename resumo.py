{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "052f356e",
   "metadata": {},
   "source": [
    "# For\n",
    "- OBS : AO EXECUTAR OS CODIGOS AS VARIAVEIS PODEM DA CONFLITOS COM OS OUTROS BLOCOS DE CODIGO. \n",
    "- O for percorre a lista, tupla dicionário.\n",
    "- Declaração : for i in range(n),  repete o codigo n vezes. \n",
    "- Melhor utilizar o enumerate para saber o item do elemento da lista.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ba2a062",
   "metadata": {},
   "outputs": [],
   "source": [
    "#duas listas\n",
    "produtos = ['coca', 'pepsi', 'guarana', 'sprite', 'fanta']\n",
    "producao = [15000, 12000, 13000, 5000, 250]\n",
    "tamanho = len(produtos) # tamanho da lista\n",
    "\n",
    "for i in range(tamanho): #o for ate o tamanho da lista e associando isso a baixo\n",
    "    print ('A produção de {} é {} unidades'.format(produtos[i], producao[i]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa680715",
   "metadata": {},
   "outputs": [],
   "source": [
    "#perconrrendo as listas e verificando o indice dos elementos.\n",
    "estoque = [1200, 300, 800, 1500, 1900, 2750, 400, 20, 23, 70, 90, 80, 1100, 999, 900, 880, 870, 50, 1111, 120, 300, 450, 800]\n",
    "produtos = ['coca', 'pepsi', 'guarana', 'skol', 'brahma', 'agua', 'del valle', 'dolly', 'red bull', 'cachaça', 'vinho tinto', 'vodka', 'vinho branco', 'tequila', 'champagne', 'gin', 'guaracamp', 'matte', 'leite de castanha', 'leite', 'jurupinga', 'sprite', 'fanta']\n",
    "nivel_minimo = 50\n",
    "\n",
    "#modo 1\n",
    "for qnt in estoque:\n",
    "    i = estoque.index(qnt) #passa a posição do item.\n",
    "    if qnt <= 50:\n",
    "        print (produtos[i])\n",
    "        \n",
    "print (\"\\n\")\n",
    "\n",
    "#modo com o enumerate\n",
    "for i, qnt in enumerate(estoque):\n",
    "    if qnt <= 50:\n",
    "        print (produtos[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "426ca091",
   "metadata": {},
   "outputs": [],
   "source": [
    "#LISTA DE LISTA\n",
    "\n",
    "meta = 10000\n",
    "vendas = [\n",
    "    ['João', 15000],\n",
    "    ['Julia', 27000], #vendas [1] é ['Julia', 27000]\n",
    "    ['Marcus', 9900],\n",
    "    ['Maria', 3750],\n",
    "    ['Ana', 10300],\n",
    "    ['Alon', 7870],\n",
    "]\n",
    "\n",
    "for item in vendas: # com esse for eu entro na lista vendas\n",
    "    if item[1] >=10000:# item é lista [nome, valor]. item[1] é o item da segunda posição da lista.\n",
    "        print ('Quem bateu a meta foi {}' .format(item[1]))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e8c6271",
   "metadata": {},
   "outputs": [],
   "source": [
    "#FOR DENTRO DE FOR\n",
    "#LISTA DE LISTA\n",
    "\n",
    "etq = [#estoque das fabricas;\n",
    "    [294, 125, 269, 208, 783, 852, 259, 371, 47, 102, 386, 87, 685, 686, 697, 941, 163, 631, 7, 714, 218, 670, 453],\n",
    "    [648, 816, 310, 555, 992, 643, 226, 319, 501, 23, 239, 42, 372, 441, 126, 645, 927, 911, 761, 445, 974, 2, 549],\n",
    "    [832, 683, 784, 449, 977, 705, 198, 937, 729, 327, 339, 10, 975, 310, 95, 689, 137, 795, 211, 538, 933, 751, 522],\n",
    "    [837, 168, 570, 397, 53, 297, 966, 714, 72, 737, 259, 629, 625, 469, 922, 305, 782, 243, 841, 848, 372, 621, 362],\n",
    "    [429, 242, 53, 985, 406, 186, 198, 50, 501, 870, 781, 632, 781, 105, 644, 509, 401, 88, 961, 765, 422, 340, 654],\n",
    "]\n",
    "\n",
    "fabricas = ['Lira Manufacturing', 'Fábrica Hashtag', 'Python Manufaturas', 'Produções e Cia', 'Manufatura e Cia']\n",
    "nivel_minimo = 50\n",
    "qnt_baixa = [] #lista vazia\n",
    "\n",
    "for i , estoque in enumerate(etq):# a variavel estoque é uma linha (uma lista) de etq. Vare cada linha e não os elementros dentro da segunda lista (que é a lista da lista)\n",
    "    for qnt in estoque: #esse for vare a lista da lista\n",
    "        if qnt <= 40:\n",
    "            #fabrica_qnt_baixa.append(fabricas[i])\n",
    "            #para sair o nome da fabrica uma vez so\n",
    "            if fabricas[i] in qnt_baixa:#se a fabrica tiver na lista de fabrica, eu passo (com o pass).\n",
    "                pass # não faz nada\n",
    "            else:\n",
    "                qnt_baixa.append(fabricas[i])\n",
    "                \n",
    "print (qnt_baixa)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a7bff75",
   "metadata": {},
   "source": [
    "## Alguns metodos utilizados\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b113754",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Lembre de usar o unpacking quando necessario\n",
    "marcas.append(\"chery\") #Na lista marcas, adciono o elemento no final da lista.\n",
    "marcas.remove(\"chery\") #Removo da lista o elemento\n",
    "tamanho = len(marcas) #Tamanho da lista\n",
    "protudos = set(produtos) #tirar os elemetos repeditos e usar o list para transformar em lista novamente.\n",
    "protudos = list(produtos)\n",
    "lista = zip(lista1,lista2) Aqui estou juntando duas litas para poder ter relações seus itens. E depois usar o list para transormar em dicionario.\n",
    "lista[:i] # estou pegando os elementos ate o i - 1 , ou seja, não pego i\n",
    "lista[i:] # pego  de i ate o final da lista, mas incluo i nesse caso.\n",
    "print ('Total  = {} ' .format(total))\n",
    "nome, data, nascimento, salario, cargo = vendas #unpcking de tupla\n",
    "dicionario.keys()   #para pegar a chave do dicionario\n",
    "dicionario.values() #para pegar a chave do dicionario\n",
    "dicionario.items()  #retorna uma lista de tupla\n",
    "\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be5ef684",
   "metadata": {},
   "source": [
    "# While\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d2c5516",
   "metadata": {},
   "outputs": [],
   "source": [
    "vendas = [\n",
    "    ['maçã', 5],\n",
    "    ['banana', 15],\n",
    "    ['azeite', 1],\n",
    "    ['vinho', 3],\n",
    "]\n",
    "vendas = [] #lista vazia\n",
    "\n",
    "while True: # so para entrar no while\n",
    "    produto = input('Qual o produto?')\n",
    "# eu paro o codigo caso não haja produto digitado.\n",
    "    if not produto:\n",
    "        #break\n",
    "    qtde = int(input('Qual a quantidade?'))\n",
    "    vendas.append([produto, qtde]) #adciono na lista \n",
    "    \n",
    "print(vendas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cc4ae34",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7aaddc2d",
   "metadata": {},
   "source": [
    "# TUPLA\n",
    "- É imutável\n",
    "- Declaração : produto = ('20/08/2020', 'iphone x', 'azul', '128gb', 350, 4000).\n",
    "- Muito utilizado lista de tupla para guardar informações imutáveis.\n",
    "- ACESSA uma tupla com o for e o Unpacking para saber e armazenar o conteudo.\n",
    "- Tiver uma lista de tupla, o unpacking é importante para pegar valores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b920449e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tupla vendas\n",
    "vendas = ('Lira', '25/08/2020', '15/02/1994', 2000, 'Estagiário')\n",
    "#Para coletar/atribuir valores da tupla, pode-se fazer da seguinte forma:\n",
    "#Modo 1\n",
    "nome = vendas[0]\n",
    "data_contratacao = vendas[1]\n",
    "data_nascimento = vendas[2]\n",
    "salario = vendas[3]\n",
    "cargo = vendas[4]\n",
    "\n",
    "# MODO 2 E O MAIS EFICIENTE (Unpacking da tupla)\n",
    "#As variaveis recebem a tupla e cada uma tem seu valor.\n",
    "nome , data, nascimento, salario, cargo = vendas "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79d9c3b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#O ENUMERATE é em si uma tupla. Ele transforma o item numa tupla (indice, valor).\n",
    "#Retorna tupla(indice,valor)\n",
    "\n",
    "vendas = [1000, 2000, 300, 300, 150]\n",
    "funcionarios = ['João', 'Lira', 'Ana', 'Maria', 'Paula']\n",
    "\n",
    "for i, venda in enumerate(vendas):\n",
    "        print('{} vendeu {} unidades'.format(funcionarios[i], venda))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be125cc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LISTA DE TUPLA\n",
    "\n",
    "vendas = [\n",
    "    ('20/08/2020', 'iphone x', 'azul', '128gb', 350, 4000),\n",
    "    ('20/08/2020', 'iphone x', 'prata', '128gb', 1500, 4000),\n",
    "    ('20/08/2020', 'ipad', 'prata', '256gb', 127, 6000),\n",
    "    ('20/08/2020', 'ipad', 'prata', '128gb', 981, 5000),\n",
    "    ('21/08/2020', 'iphone x', 'azul', '128gb', 397, 4000),\n",
    "    ('21/08/2020', 'iphone x', 'prata', '128gb', 1017, 4000),\n",
    "    ('21/08/2020', 'ipad', 'prata', '256gb', 50, 6000),\n",
    "    ('21/08/2020', 'ipad', 'prata', '128gb', 4000, 5000),\n",
    "]\n",
    "\n",
    "#data, produto, cor, armazenamento, qnt, valor = vendas\n",
    "\n",
    "#Qual foi o faturamento de IPhone no dia 20/08/2020?\n",
    "faturamento = 0\n",
    "for item in vendas: #varendo a lista\n",
    "    data, produto, cor, armazenamento, qnt, valor = item #\"unpacking\" da tupla\n",
    "    if data == '20/08/2020' and produto == 'iphone x':\n",
    "        faturamento = faturamento + (qnt * valor)  #faturamento += (qnt * valor)\n",
    "print (faturamento)\n",
    "\n",
    "#Qual foi o produto mais vendido (em unidades) no dia 21/08/2020?\n",
    "produto_mais_vendido = \" \" # uma lista vazia para armazenar o produto mais vendido.\n",
    "qnt0 = 0\n",
    "for item in vendas:\n",
    "    data, produto, cor, armazenamento, qnt, valor = item\n",
    "    if data == '21/08/2020':\n",
    "        if qnt > qnt0:\n",
    "            qnt0 = qnt\n",
    "            produto_mais_vendido = produto\n",
    "print (produto_mais_vendido)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1007a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LISTA DE TUPLA\n",
    "\n",
    "vendas_produtos = [('iphone', 558147, 951642), ('galaxy', 712350, 244295), ('ipad', 573823, 26964), ('tv', 405252, 787604), ('máquina de café', 718654, 867660), ('kindle', 531580, 78830), ('geladeira', 973139, 710331), ('adega', 892292, 646016), ('notebook dell', 422760, 694913), ('notebook hp', 154753, 539704), ('notebook asus', 887061, 324831), ('microsoft surface', 438508, 667179), ('webcam', 237467, 295633), ('caixa de som', 489705, 725316), ('microfone', 328311, 644622), ('câmera canon', 591120, 994303)]\n",
    "var = \" \" \n",
    "for item in vendas_produtos:\n",
    "    Produto, venda19, venda20 = item #UNPACKING DE TUPLA\n",
    "    if venda20 > venda19:r\n",
    "        var = Produto\n",
    "        var2 = (venda20/venda19) - 1\n",
    "        print(\"{} com vendas superior a 2019 com crescimento de {:.1%}\" .format(var, var2))\n",
    "    print(\"As vendas em 2019 foram {} e 2020, {}\" .format(venda19,venda20))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "172d1704",
   "metadata": {},
   "source": [
    "# DICIONÁRIO\n",
    "- Declaração : dicionario = {chave: valor, chave: valor, chave: valor, chave: valor ...}\n",
    "- O dicionário não tem como ordenar, tem que transformar em uma lista de tupla.\n",
    "- Adcionando valor a uma chave ou modificando.\n",
    "    - dicionario[chave] = valor \n",
    "- Dicionario vario \n",
    "    - nome_dicionario = {}\n",
    "- Atualizando o dicionario\n",
    "    - dicionario.update(chave:valor, chave:valor)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b6716bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "mais_vendidos = {'tecnologia': 'iphone', 'refrigeracao': 'ar consul 12000 btu', 'livros': 'o alquimista', 'eletrodoméstico': 'geladeira', 'lazer': 'prancha surf'}\n",
    "\n",
    "vendas = {'iphone': 15000, 'livros': 'o alquimista'} #dicionario\n",
    "var = vendas ['livros'] # uma variavel recebe do dicionario\n",
    "vendas[\"iphone\"] = 5000 # aqui atribuo um novo valor a chave iphone\n",
    "print (vendas)\n",
    "print (var)\n",
    "\n",
    "#LISTAR AS CHAVES e VALORES\n",
    "for chave in mais_vendidos:\n",
    "    print(chave) # imprime a chave\n",
    "    print(mais_vendidos[chave]) #imprime os valores. PODE USAR O METODO tupla.get(chave) para pegar os valores.\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "515c48c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pegar informação do item do dicionario\n",
    "\n",
    "mais_vendidos = {'tecnologia': 'iphone', 'refrigeracao': 'ar consul 12000 btu', 'livros': 'o alquimista', 'eletrodoméstico': 'geladeira', 'lazer': 'prancha surf'}\n",
    "vendas_tecnologia = {'iphone': 15000, 'samsung galaxy': 12000, 'tv samsung': 10000, 'ps5': 14300, 'tablet': 1720, 'ipad': 1000, 'tv philco': 2500, 'notebook hp': 1000, 'notebook dell': 17000, 'notebook asus': 2450}\n",
    "# 2 metodos para pegar valores do dicionario\n",
    "print (\"{}\" .format(vendas_tecnologia[\"ps5\"])) #com o format tem que passar a chave em []\n",
    "print (vendas_tecnologia.get('ps5')) # utilizando o get\n",
    "\n",
    "#ver se tem itens\n",
    "if 'tecnologia' in mais_vendidos:\n",
    "     print(mais_vendidos['tecnologia'])\n",
    "if vendas_tecnologia.get('samsung galaxy') == None: # se nao tiver\n",
    "        print (\"Não tem\")\n",
    "else:\n",
    "    print (vendas_tecnologia.get('samsung galaxy'))\n",
    "\n",
    "#VERIFICAR AS CHAVES E SE TIVER NA TUPLA, SOMAR\n",
    "soma = 0\n",
    "for item in vendas_tecnologia:\n",
    "    #print(\"{} coresponde a : {}\".format(item,vendas_tecnologia[item]))\n",
    "    if  \"notebook\" in item:\n",
    "        soma += vendas_tecnologia[item]\n",
    "print(soma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e84a6527",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uma tupla com listas\n",
    "niveis_co2 = {\n",
    "    'AC': [325,405,429,486,402],\n",
    "    'AL': [492,495,310,407,388],\n",
    "    'AP': [507,503,368,338,400],\n",
    "    'AM': [429,456,352,377,363],\n",
    "    'BA': [321,508,372,490,412],\n",
    "    'CE': [424,328,425,516,480],\n",
    "    'ES': [449,506,461,337,336],\n",
    "    'GO': [425,460,385,485,460],\n",
    "    'MA': [361,310,344,425,490],\n",
    "    'MT': [358,402,425,386,379],\n",
    "    'MS': [324,357,441,405,427],\n",
    "    'MG': [345,367,391,427,516],\n",
    "    'PA': [479,514,392,493,329],\n",
    "    'PB': [418,499,317,302,476],\n",
    "    'PR': [420,508,419,396,327],\n",
    "    'PE': [404,444,495,320,343],\n",
    "    'PI': [513,513,304,377,475],\n",
    "    'RJ': [502,481,492,502,506],\n",
    "    'RN': [446,437,519,356,317],\n",
    "    'RS': [427,518,459,317,321],\n",
    "    'RO': [517,466,512,326,458],\n",
    "    'RR': [466,495,469,495,310],\n",
    "    'SC': [495,436,382,483,479],\n",
    "    'SP': [495,407,362,389,317],\n",
    "    'SE': [508,351,334,389,418],\n",
    "    'TO': [339,490,304,488,419],\n",
    "    'DF': [376,516,320,310,518], \n",
    "}\n",
    "soma_da_lista = 0\n",
    "\n",
    "#var1 = input('Digite o estado: ') #ja recebe como string\n",
    "for estado in niveis_co2:\n",
    "    qnt_sensores = len(niveis_co2[estado]) # tamanho da lista dentro da tupla.\n",
    "    soma_da_lista = sum(niveis_co2[estado]) # soma da lista do dicionario\n",
    "    media = soma_da_lista/qnt_sensores\n",
    "    if media > 450:\n",
    "        print(\"{}\".format(estado))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4232926",
   "metadata": {},
   "outputs": [],
   "source": [
    "#É um dicionario de dicionario\n",
    "video = {'uri': '/videos/465407533', 'name': '15 Atalhos no Excel para Ficar Mais Produtivo', 'download': [{'quality': 'source', 'type': 'source', 'width': 1920, 'height': 1080, 'expires': '2020-10-07T04:00:55+00:00', 'link': 'https://player.vimeo.com/play/2064518513?s=465407533_1602043255_5f2f93dd00b66eba66d481f913383b4f&loc=external&context=Vimeo%5CController%5CApi%5CResources%5CUser%5CVideosController.&download=1&filename=15%2BAtalhos%2Bno%2BExcel%2Bpara%2BFicar%2BMais%2BProdutivosource.mp4', 'created_time': '2020-10-06T14:26:17+00:00', 'fps': 30, 'size': 402678442, 'md5': 'af09508ceceed4994554f04e8b931e22', 'public_name': 'Original', 'size_short': '384.02MB'}, {'quality': 'hd', 'type': 'video/mp4', 'width': 1920, 'height': 1080, 'expires': '2020-10-07T04:00:55+00:00', 'link': 'https://player.vimeo.com/play/2064523157?s=465407533_1602043255_ab7b8353c59b5048032396ec5d95a276&loc=external&context=Vimeo%5CController%5CApi%5CResources%5CUser%5CVideosController.&download=1&filename=15%2BAtalhos%2Bno%2BExcel%2Bpara%2BFicar%2BMais%2BProdutivo175.mp4', 'created_time': '2020-10-06T14:29:06+00:00', 'fps': 30, 'size': 173556205, 'md5': '3c05e1e69bd6b13eb1464451033907d2', 'public_name': 'HD 1080p', 'size_short': '165.52MB'}, {'quality': 'sd', 'type': 'video/mp4', 'width': 960, 'height': 540, 'expires': '2020-10-07T04:00:55+00:00', 'link': 'https://player.vimeo.com/play/2064523153?s=465407533_1602043255_f5ac38009ec5c0a13b30600c631446a3&loc=external&context=Vimeo%5CController%5CApi%5CResources%5CUser%5CVideosController.&download=1&filename=15%2BAtalhos%2Bno%2BExcel%2Bpara%2BFicar%2BMais%2BProdutivo165.mp4', 'created_time': '2020-10-06T14:29:06+00:00', 'fps': 30, 'size': 89881848, 'md5': '4a5c5c96cdf18202ed20ca534fd88007', 'public_name': 'SD 540p', 'size_short': '85.72MB'}, {'quality': 'sd', 'type': 'video/mp4', 'width': 426, 'height': 240, 'expires': '2020-10-07T04:00:55+00:00', 'link': 'https://player.vimeo.com/play/2064522788?s=465407533_1602043255_16c69872e2c4e92cc949d0b772242959&loc=external&context=Vimeo%5CController%5CApi%5CResources%5CUser%5CVideosController.&download=1&filename=15%2BAtalhos%2Bno%2BExcel%2Bpara%2BFicar%2BMais%2BProdutivo139.mp4', 'created_time': '2020-10-06T14:28:31+00:00', 'fps': 30, 'size': 27401450, 'md5': '91cc0229087ec94bf67f64b01ad8768d', 'public_name': 'SD 240p', 'size_short': '26.13MB'}, {'quality': 'sd', 'type': 'video/mp4', 'width': 640, 'height': 360, 'expires': '2020-10-07T04:00:55+00:00', 'link': 'https://player.vimeo.com/play/2064522787?s=465407533_1602043255_310b087e2fc8c5e1154ce7a33d10d60e&loc=external&context=Vimeo%5CController%5CApi%5CResources%5CUser%5CVideosController.&download=1&filename=15%2BAtalhos%2Bno%2BExcel%2Bpara%2BFicar%2BMais%2BProdutivo164.mp4', 'created_time': '2020-10-06T14:28:31+00:00', 'fps': 30, 'size': 48627155, 'md5': '548640bf79ce1552a3401726bb0e4224', 'public_name': 'SD 360p', 'size_short': '46.37MB'}]}\n",
    "#print(video)\n",
    "#pegar informação do link do dicionario video.\n",
    "\n",
    "for item in video:\n",
    "    print (item) #imprime cada item do video\n",
    "\n",
    "print (video['download'][0]['link']) # estou printando o primeiro item do dicionario e pegango o valor do link."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ee0813a",
   "metadata": {},
   "outputs": [],
   "source": [
    "var = {'tecnologia': 'iphone', 'refrigeracao': 'ar consul 12000 btu', 'livros': 'o alquimista', 'eletrodoméstico': 'geladeira', 'lazer': 'prancha surf'}\n",
    "var2 = {'refrigeracao': 100, 'livros': 253, 'eletrodoméstico': 500, 'lazer': 10}\n",
    "\n",
    "#UTILIZANDO A CHAVE\n",
    "for chave in var2: \n",
    "    if var2[chave] > 100:\n",
    "        print (var2[chave])\n",
    "        print (\"O produto é: {}\" .format(chave))\n",
    "print('####')\n",
    "\n",
    "#UTILIZANDO O ITEMS\n",
    "for produto, qnt in var2.items():\n",
    "    if qnt > 100:\n",
    "        print (\"O produto é: {}\" .format(produto))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "152ac987",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "236559bc",
   "metadata": {},
   "source": [
    "# FUNÇÃO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f9831f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#definindo a função\n",
    "#funcao sem parametro\n",
    "def cadastrar_produto(): # geralmente o verbo fica no infinitivo pois é uma ação a se fazer.\n",
    "    produto = input('Digite o nome do produto que deseja cadastrar: ')\n",
    "    produto = produto.casefold() #tudo minusculo\n",
    "    produto = produto.strip() #ignorar os espaços.\n",
    "    return produto\n",
    "\n",
    "#chamando a função\n",
    "var = cadastrar_produto()\n",
    "print (var)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a24d472",
   "metadata": {},
   "outputs": [],
   "source": [
    "#passando parametros para minha função\n",
    "def minha_soma(num1, num2, num3):\n",
    "    return num1 + num2 + num3\n",
    "\n",
    "#chamando a função\n",
    "soma = minha_soma(10, 20, 0)\n",
    "print(soma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52f1e927",
   "metadata": {},
   "outputs": [],
   "source": [
    "#criando a função\n",
    "def bebida_alcolica(bebida):\n",
    "    bebida = bebida.upper() #metodo transformo em tudo maiusculo\n",
    "    if 'BEB' in bebida: # se está em bebidas, pois toda bebica alcolica comeca com beb.\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "produtos = ['CAR46275','TFA23962','TFA64715','TFA69555','TFA56743','BSA45510','TFA44968','CAR75448','CAR23596','CAR13490','BEB21365','BEB31623','BSA62419','BEB73344','TFA20079','BEB80694','BSA11769','BEB19495','TFA14792','TFA78043','BSA33484','BEB97471','BEB62362','TFA27311','TFA17715','BEB85146','BEB48898','BEB79496','CAR38417','TFA19947','TFA58799','CAR94811','BSA59251','BEB15385','BEB24213','BEB56262','BSA96915','CAR53454','BEB75073']\n",
    "\n",
    "for produto in produtos:\n",
    "    if bebida_alcolica(produto):#chamo a função e passo a variavel produto que a função vai receber.\n",
    "        print('Enviar {} para setor de bebidas alcóolicas'.format(produto))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4680434c",
   "metadata": {},
   "outputs": [],
   "source": [
    "### forma de passar o argumento nas funções\n",
    "def categoria(bebida, cod_categoria):\n",
    "    bebida = bebida.upper() #metodo transformo em tudo maiusculo\n",
    "    if cod_categoria in bebida: # se está em bebidas, pois toda bebica alcolica comeca com beb.\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "produtos = ['CAR46275','TFA23962','TFA64715','TFA69555','TFA56743','BSA45510','TFA44968','CAR75448','CAR23596','CAR13490','BEB21365','BEB31623','BSA62419','BEB73344','TFA20079','BEB80694','BSA11769','BEB19495','TFA14792','TFA78043','BSA33484','BEB97471','BEB62362','TFA27311','TFA17715','BEB85146','BEB48898','BEB79496','CAR38417','TFA19947','TFA58799','CAR94811','BSA59251','BEB15385','BEB24213','BEB56262','BSA96915','CAR53454','BEB75073']\n",
    "\n",
    "for produto in produtos:\n",
    "    if categoria(produto, \"BEB\"): #os parametros poderiam ser passados como função(produto, cod_categoria = \"BEB\"). Se eu começo como palavra chave, o adiante tem que ser tambem.\n",
    "        print('Enviar {} para setor de bebidas alcóolicas'.format(produto))\n",
    "    elif categoria(produto, \"BSA\"):\n",
    "        print('Enviar {} para setor de bebidas não alcóolicas'.format(produto))\n",
    "        \n",
    "        \n",
    "#ATRIBUINDO valor aos parametros\n",
    "def padronizar_codigos(lista_codigos, padrao='m'):\n",
    "    #seu código aqui\n",
    "    for i, item in enumerate(lista_codigos):\n",
    "        #item = item.replace('  ',' ')\n",
    "        item = item.strip()\n",
    "        if padrao =='m':\n",
    "            item = item.casefold()\n",
    "        elif padrao =='M':\n",
    "            item = item.upper()\n",
    "        lista_codigos[i] = item\n",
    "    return lista_codigos\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "cod_produtos = [' ABC12', '  abc34', ' A bC37']\n",
    "print(padronizar_codigos(cod_produtos, padrao = 'M'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c052f85e",
   "metadata": {},
   "outputs": [],
   "source": [
    "preco = 1500\n",
    "custo = 400\n",
    "lucro = 800\n",
    "\n",
    "#função passando os parametros\n",
    "def calcular_imposto(preco, custo, lucro):\n",
    "    imposto = preco - custo - lucro\n",
    "    imposto_porcentagem = imposto/preco\n",
    "    return  imposto/preco\n",
    "\n",
    "#função sem a passagem de parametro\n",
    "def cal_imp():\n",
    "    preco1 = int(input(\"Digite o preco: \"))\n",
    "    custo1 = int(input(\"Digite o custo: \"))\n",
    "    lucro1 = int(input(\"Digite o lucro: \"))\n",
    "    imposto = preco1 - custo1 - lucro1\n",
    "    #imposto_porcentagem = imposto/preco\n",
    "    return imposto/preco\n",
    "\n",
    "#aplique sua function nos valores fornecidos para ver se ela está funcionando corretamente\n",
    "var = calcular_imposto(preco, custo, lucro)\n",
    "print (var)\n",
    "\n",
    "var2 = cal_imp()\n",
    "print (var2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22ba695e",
   "metadata": {},
   "outputs": [],
   "source": [
    "meta = 10000\n",
    "vendas = {\n",
    "    'João': 15000,\n",
    "    'Julia': 27000,\n",
    "    'Marcus': 9900,\n",
    "    'Maria': 3750,\n",
    "    'Ana': 10300,\n",
    "    'Alon': 7870,\n",
    "}\n",
    "\n",
    "def bater_meta(meta,vendas):\n",
    "    bateram_meta = [] # criando essa lista para armazenar quem bateu a meta.\n",
    "    for funcionario in vendas:\n",
    "        if vendas[funcionario] > meta:\n",
    "            bateram_meta.append(funcionario) # add o funcionario no final da lista.\n",
    "    #% de quem beteu meta\n",
    "    bateu = len(bateram_meta) / len(vendas)\n",
    "    return bateu, bateram_meta\n",
    "\n",
    "\n",
    "#caso queira usar os valores separados do return, pode usar o unpacking da tupla para separar.\n",
    "#chamo a função\n",
    "print ('Funcionarios que bateram a meta foram: {}' .format(bater_meta(meta,vendas)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5e4eb74",
   "metadata": {},
   "source": [
    "### Passagem de multiplos argumentos numa função\n",
    "*args para positional arguments -> argumentos vêm em formato de tupla. Utilizado quando precisa de indefinidos argumentos para ser passado para função.\n",
    "\n",
    "def minha_funcao(*args):\n",
    "    ...\n",
    "    \n",
    "**kwargs para keyword arguments -> argumentos vêm em formato de dicionário. NEsse caso quando precisa passar um nome e valor. Sendo o nome (chave) \"parte da logica\" do codigo.\n",
    "\n",
    "def minha_funcao(**kwargs):\n",
    "\n",
    "#### Ordem dos argumentos:\n",
    "def minha_funcao(arg1, arg2, arg3, arg4, *args, k = kwarg1, k2 = kwarg2, k3 = kwarg3, **kwargs):\n",
    "    ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "621c6481",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minha_soma(*numeros): # *numero o py entende que será passado 1 a n valores quando chamar a função. Se printar numeros, irá notar que a saida é uma tupla.\n",
    "    print(numeros)\n",
    "    soma = 0\n",
    "    for numero in numeros:\n",
    "        soma += numero\n",
    "    return soma\n",
    "\n",
    "def preco_final(preco, **adicionais):# o **adicionais o py entende que uma chave = valor. Tem que ser passado o nome e o valor. Nesse codigo o **adcionais faz o papel do desconto, garantia e imposto.\n",
    "    print(adicionais)\n",
    "    if 'desconto' in adicionais:\n",
    "        preco *= (1 - adicionais['desconto'])\n",
    "    if 'garantia_extra' in adicionais:\n",
    "        preco += adicionais['garantia_extra'] \n",
    "    if 'imposto' in adicionais:\n",
    "        preco *= (1 + adicionais['imposto'])\n",
    "    return preco"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cd3d090",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def lista_produtos(*estoque): #passando n listas para o parametro *estoque\n",
    "    produtos = []\n",
    "    for item in estoque:\n",
    "        #produto, qnt = item # unpacking\n",
    "        for produto, qnt in item:\n",
    "            produtos.append(produto) #jogo produto na lista produtos.\n",
    "    #aqui fora dos for ja tenho a lista. Vou usar o set para tirar os elemetos repetidos e o list para transforma em lista novamente.\n",
    "    produtos = set(produtos)\n",
    "    produtos = list(produtos)\n",
    "    return produtos\n",
    "\n",
    "estoque_fim_jan = [('BSA2199',396),('PPF5239',251),('BSA1212',989),('PPF2154',449),('BEB3410',241),('PPF8999',527),('EMB9591',601),('BSA2006',314),('EMB3604',469),('EMB2070',733),('PPF9018',339),('PPF1468',906),('BSA5819',291),('PPF8666',850),('BEB2983',353),('BEB5877',456),('PPF5008',963),('PPF3877',185),('PPF7321',163),('BSA8833',644),('PPF4980',421),('PPF3063',757),('BSA2089',271),('BSA8398',180),('EMB4622',515),('EMB9814',563),('PPF3784',229),('PPF2398',270),('BEB3211',181),('PPF8655',459),('PPF1874',799),('PPF8789',126),('PPF6324',375),('EMB9290',883),('BSA5516',555),('BSA8451',243),('BSA8213',423)]\n",
    "estoque_fim_fev = [('BSA2199',849),('PPF5239',877),('BSA1212',336),('PPF2154',714),('BEB3410',834),('PPF8999',201),('EMB9591',576),('BSA2006',985),('EMB3604',615),('EMB2070',182),('PPF9018',127),('PPF1468',212),('BSA5819',338),('PPF8666',751),('BEB2983',363),('BEB5877',916),('PPF5008',331),('PPF3877',744),('PPF7321',488),('BSA8833',277),('PPF4980',530),('PPF3063',796),('BSA2089',396),('BSA8398',478),('EMB4622',603),('EMB9814',784),('PPF3784',434),('PPF2398',896),('BEB3211',826),('PPF8655',748),('PPF1874',210),('PPF8789',891),('PPF6324',250),('EMB6618',611),('BSA3409',984),('BSA9866',870),('BSA1792',672)]\n",
    "estoque_fim_mar = [('BSA2199',772),('PPF5239',394),('BSA1212',409),('PPF2154',473),('BEB3410',831),('PPF8999',764),('EMB9591',942),('BSA2006',482),('EMB3604',745),('EMB2070',451),('PPF9018',608),('PPF1468',675),('BSA5819',431),('PPF8666',795),('BEB2983',439),('BEB5877',588),('PPF5008',442),('PPF3877',950),('PPF7321',606),('BSA8833',464),('PPF4980',819),('PPF3063',687),('BSA2089',253),('BSA8398',437),('EMB4622',769),('EMB9814',178),('PPF3784',996),('PPF2398',588),('BEB3211',247),('PPF8655',309),('PPF1874',305),('PPF8789',878),('PPF6324',826),('EMB6618',534),('BSA3409',705),('BSA9895',618),('BSA4319',690)]\n",
    "estoque_fim_abr = [('BSA2199',647),('PPF5239',292),('BSA1212',551),('PPF2154',802),('BEB3410',712),('PPF8999',603),('EMB9591',963),('BSA2006',481),('EMB3604',199),('EMB2070',635),('PPF9018',956),('PPF1468',161),('BSA5819',787),('PPF8666',771),('BEB2983',867),('BEB5877',539),('PPF5008',614),('PPF3877',715),('PPF7321',336),('BSA8833',961),('PPF4980',116),('PPF3063',876),('BSA2089',579),('BSA8398',814),('EMB4622',434),('EMB9814',981),('PPF3784',498),('PPF2398',498),('BEB3211',606),('PPF8655',168),('PPF1874',518),('PPF8789',157),('PPF6324',501),('EMB6618',932),('BSA3409',247),('BSA9895',287),('BSA4319',477)]\n",
    "#agora aplique com as listas fornecidas para ver se ela está funcionando\n",
    "\n",
    "print (lista_produtos(estoque_fim_jan,estoque_fim_fev,estoque_fim_mar,estoque_fim_abr))\n",
    "print (len (lista_produtos(estoque_fim_jan,estoque_fim_fev,estoque_fim_mar,estoque_fim_abr)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ea9148b",
   "metadata": {},
   "source": [
    "# Orientação a Objeto, Modulos e Bibliotecas"
   ]
  },
  {
   "cell_type": "raw",
   "id": "cd8fac42",
   "metadata": {},
   "source": [
    "Tudo no Python é um objeto. Esses objetos possuim metodos que alguem ja programou e pode ser utilizado.\n",
    "String() é um exemplo.\n",
    "Basicamente um objeto é algo (uma coisa) que possui varios modulos importados.\n",
    "As descrições dos modulos é olhar na documentação/pesquisa. \n",
    "    stackoverflow.com\n",
    "    docs.python.org\n",
    "\n",
    "Estrudura basica é:\n",
    "\n",
    "import modulo ou import modulo as nome_atribuido_por_mim\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c75deacc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importo o modulo para abrir uma pagina web.\n",
    "import webbrowser\n",
    "\n",
    "webbrowser.open('https://www.google.com/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aad9a0bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "data_hoje = time.ctime() # No padrao UTC\n",
    "#ou entao data_hoje = time.ctime(time())\n",
    "print(data_hoje)\n",
    "\n",
    "###\n",
    "print('Começando')\n",
    "time.sleep(5)\n",
    "print('Rodou 5 segundos após')\n",
    "###\n",
    "#data_atual = time.gmtime() Pega informações de dias, hora, segundo, minuto, tudo detalhado\n",
    "#print(data_atual)\n",
    "ano = data_atual.tm_year\n",
    "mes = data_atual.tm_mon\n",
    "dia = data_atual.tm_mday\n",
    "hora = data_atual.tm_hour\n",
    "dia_da_semana = data_atual.tm_wday\n",
    "print('Hoje é dia {}/{}/{}'.format(dia, mes, ano))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f7c4345",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PEGAR OS MAIORES VALORES DO DICIONARIO\n",
    "vendas_tecnologia = {'notebook asus': 2450, 'iphone': 15000, 'samsung galaxy': 12000, 'tv samsung': 10000, 'ps5': 14300, 'tablet': 1720, 'notebook dell': 17000, 'ipad': 1000, 'tv philco': 2500, 'notebook hp': 1000}\n",
    "\n",
    "# importando biblioteca para contar os maiores valores do dicionario\n",
    "from collections import Counter\n",
    "\n",
    "var = Counter(vendas_tecnologia)\n",
    "print(var.most_common(3)) #usando esse metodo para pegar n = 3 maiores valores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a86179c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#GRAFICOS\n",
    "\n",
    "\n",
    "#https://matplotlib.org/\n",
    "\n",
    "import matplotlib.pyplot as plotar\n",
    "#import numpy as np # quando quer utilizar numeros aleatorios ou trabalhar com numeros em geral\n",
    "#xpoints = np.array([0, 6]) definindo o range de x\n",
    "#ypoints = np.array([0, 250])\n",
    "#plt.plot(xpoints, ypoints) plocar os pontos\n",
    "#plt.show()\n",
    "\n",
    "vendas_meses = [1500, 1727, 1350, 999, 1050, 1027, 1022, 1500, 2000, 2362, 2100, 2762]\n",
    "meses = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez']\n",
    "\n",
    "plotar.plot(meses, vendas_meses, color='red')\n",
    "plotar.ylabel('Vendas') #passando o nome\n",
    "plotar.xlabel('Meses')\n",
    "# .axis ([minx, maxy, miny, maxy]) sao as eescala do grafico\n",
    "plotar.axis([0, 12, 0, max(vendas_meses)+500])\n",
    "plotar.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f166c464",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "vendas = np.random.randint(1000, 3000, 50) # No range de 1000 a 3000 vai gerar 50 numeros aleatorios\n",
    "meses = np.arange(1, 51) # assim como acima, aqui gera um range não aleatorio de 1 a 50 \n",
    "print(vendas)\n",
    "\n",
    "plt.plot(meses, vendas, color = \"black\") # o plot plota linha; .bar é barra ...\n",
    "plt.axis([0, 50, 0, max(vendas)+200])\n",
    "plt.xlabel('Meses')\n",
    "plt.ylabel('Vendas')\n",
    "plt.show() #por padrão tem que ter. É para mostrar o valor."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb2fcdc7",
   "metadata": {},
   "source": [
    "# List Comprehension\n",
    "\n",
    "É uma forma de iterar pelos elementas das listas de maneira \"mais direta\".\n",
    "- Estrutura lista = [expressão for item in iterable]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ab0c54a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[30.0, 45.0, 90.0, 1650.0]\n",
      "[30.0, 45.0, 90.0, 1650.0]\n",
      "['microondas', 'iphone', 'vinho', 'cafeiteira']\n"
     ]
    }
   ],
   "source": [
    "preco_produtos = [100, 150, 300, 5500]\n",
    "produtos = ['vinho', 'cafeiteira', 'microondas', 'iphone']\n",
    "\n",
    "# lista = [expressão for item in iterable]\n",
    "impostos = [(preco * 0.3) for preco in preco_produtos] # um for mais direto\n",
    "print (impostos)\n",
    "\n",
    "# COM FUNÇÂO\n",
    "\n",
    "def calcular_imposto(preco, imposto):\n",
    "    return preco * imposto\n",
    "\n",
    "lista_imposto = [calcular_imposto(preco, 0.3) for preco in preco_produtos]\n",
    "print(lista_imposto )\n",
    "\n",
    "# JUNTANDO DUAS LISTAS E PEGANDO ORDENANDO POR MAIOR VALOR DE VENDAS\n",
    "vendas_produtos = [1500, 150, 2100, 1950]\n",
    "produtos = ['vinho', 'cafeiteira', 'microondas', 'iphone']\n",
    "\n",
    "lista_aux = list(zip(vendas_produtos, produtos)) # Transforma em em lista a junção das duas listas passadas.\n",
    "lista_aux.sort(reverse=True) # ordena\n",
    "produtos = [produto for vendas, produto in lista_aux]\n",
    "print(produtos) # printa o produto com mais vendas\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cd466cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''UTILIZANDO IF DENTRO DA ESTRUTURA'''\n",
    "# lista = [expressão for item in iterable if condicao] inprimir uma condição especifica.\n",
    "\n",
    "meta = 1000\n",
    "vendas_produtos = [1500, 150, 2100, 1950]\n",
    "produtos = ['vinho', 'cafeiteira', 'microondas', 'iphone']\n",
    "\n",
    "meta_batida =  [produto for i, produto in enumerate(produtos) if vendas_produtos[i] > 1000 ]\n",
    "print (meta_batida)\n",
    "\n",
    "# lista = [item if condicao else outro_resultado for item in iterable] para escolher o resultado final."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e8f110b",
   "metadata": {},
   "source": [
    "# Utilizando o metodo Pandas para analise de dados.\n",
    "https://pandas.pydata.org/\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "fa97f748",
   "metadata": {},
   "source": [
    "Temos um dataframe chamado vendas_df:\n",
    "\n",
    "vendas_df['coluna_x'] -> uma lista com os valores da coluna_x (em formato dataframe, é um dataframe com 1 coluna só)\n",
    "vendas_df[0] -> NÃO FUNCIONA ASSIM PARA DATAFRAMES\n",
    "vendas_df[:3] -> pega até a linha de índice 3 do dataframe\n",
    "vendas_df[['coluna_x', 'coluna_y', 'coluna_z']] -> cria um novo dataframe com as colunas coluna_x, coluna_y e coluna_z\n",
    "vendas_df['coluna_x'][0] -> pega o itemd a 1ª linha da coluna coluna_x\n",
    "\n",
    "O dataframe é uma tebela e suas \"colunas são chaves e as linhas as listas\".\n",
    "Para mesclar passo no parametro o quero juntar e a coluna(nome).\n",
    "novo_dataframe = dataframe1.merge(dataframe2, on='coluna')\n",
    "rename(columns={'E-mail': 'E-mail do Cliente'}) Renomear o titulo da coluna.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e8ba2ec9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Numero da Venda</th>\n",
       "      <th>Data da Venda</th>\n",
       "      <th>Data do Envio</th>\n",
       "      <th>ID Canal</th>\n",
       "      <th>ID Loja</th>\n",
       "      <th>ID Produto</th>\n",
       "      <th>ID Promocao</th>\n",
       "      <th>ID Cliente</th>\n",
       "      <th>Quantidade Vendida</th>\n",
       "      <th>Quantidade Devolvida</th>\n",
       "      <th>Nome da Marca</th>\n",
       "      <th>Tipo</th>\n",
       "      <th>Custo Unitario</th>\n",
       "      <th>Preco Unitario</th>\n",
       "      <th>Categoria</th>\n",
       "      <th>Nome da Loja</th>\n",
       "      <th>E-mail do Cliente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01/01/2017</td>\n",
       "      <td>02/01/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>981</td>\n",
       "      <td>2</td>\n",
       "      <td>6825</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>A. Datum</td>\n",
       "      <td>Regular</td>\n",
       "      <td>86,68</td>\n",
       "      <td>188,5</td>\n",
       "      <td>Câmera Digital</td>\n",
       "      <td>Loja Contoso Austin</td>\n",
       "      <td>rbrumfieldmy@ameblo.jp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>880458</td>\n",
       "      <td>23/11/2017</td>\n",
       "      <td>23/11/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>306</td>\n",
       "      <td>235</td>\n",
       "      <td>10</td>\n",
       "      <td>6825</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>Litware</td>\n",
       "      <td>Regular</td>\n",
       "      <td>264,72</td>\n",
       "      <td>799</td>\n",
       "      <td>Home Theater</td>\n",
       "      <td>Loja Contoso Europe Online</td>\n",
       "      <td>rbrumfieldmy@ameblo.jp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>191019</td>\n",
       "      <td>20/03/2017</td>\n",
       "      <td>21/03/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>172</td>\n",
       "      <td>376</td>\n",
       "      <td>2</td>\n",
       "      <td>6825</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Adventure Works</td>\n",
       "      <td>Regular</td>\n",
       "      <td>195,24</td>\n",
       "      <td>382,95</td>\n",
       "      <td>Laptop</td>\n",
       "      <td>Loja Contoso Hartford</td>\n",
       "      <td>rbrumfieldmy@ameblo.jp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18610</td>\n",
       "      <td>08/01/2017</td>\n",
       "      <td>10/01/2017</td>\n",
       "      <td>2</td>\n",
       "      <td>200</td>\n",
       "      <td>448</td>\n",
       "      <td>2</td>\n",
       "      <td>6825</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>Wide World Importers</td>\n",
       "      <td>Econômico</td>\n",
       "      <td>137,6</td>\n",
       "      <td>269,9</td>\n",
       "      <td>Desktop</td>\n",
       "      <td>Loja Contoso Catalog</td>\n",
       "      <td>rbrumfieldmy@ameblo.jp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>287704</td>\n",
       "      <td>23/04/2017</td>\n",
       "      <td>26/04/2017</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>280</td>\n",
       "      <td>1</td>\n",
       "      <td>6825</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>Contoso</td>\n",
       "      <td>Regular</td>\n",
       "      <td>167,73</td>\n",
       "      <td>329</td>\n",
       "      <td>Home Theater</td>\n",
       "      <td>Loja Contoso Beaumont No.1</td>\n",
       "      <td>rbrumfieldmy@ameblo.jp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980637</th>\n",
       "      <td>878244</td>\n",
       "      <td>23/11/2017</td>\n",
       "      <td>23/11/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>110</td>\n",
       "      <td>889</td>\n",
       "      <td>4</td>\n",
       "      <td>347</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>Contoso</td>\n",
       "      <td>Econômico</td>\n",
       "      <td>25,49</td>\n",
       "      <td>50</td>\n",
       "      <td>Acessório para Computador</td>\n",
       "      <td>Loja Contoso Orlando</td>\n",
       "      <td>edowner9m@imdb.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980638</th>\n",
       "      <td>920243</td>\n",
       "      <td>09/12/2017</td>\n",
       "      <td>10/12/2017</td>\n",
       "      <td>1</td>\n",
       "      <td>261</td>\n",
       "      <td>1367</td>\n",
       "      <td>5</td>\n",
       "      <td>38781</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>Contoso</td>\n",
       "      <td>Regular</td>\n",
       "      <td>16,55</td>\n",
       "      <td>35,99</td>\n",
       "      <td>Telefone para Casa &amp; Escritório</td>\n",
       "      <td>Loja Contoso Damascus No.1</td>\n",
       "      <td>ruben31@adventure-works.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980639</th>\n",
       "      <td>467482</td>\n",
       "      <td>21/06/2017</td>\n",
       "      <td>25/06/2017</td>\n",
       "      <td>4</td>\n",
       "      <td>115</td>\n",
       "      <td>269</td>\n",
       "      <td>1</td>\n",
       "      <td>553</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>Contoso</td>\n",
       "      <td>Regular</td>\n",
       "      <td>208,52</td>\n",
       "      <td>409</td>\n",
       "      <td>Home Theater</td>\n",
       "      <td>Loja Contoso New York No.1</td>\n",
       "      <td>akuhnertfc@themeforest.net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980640</th>\n",
       "      <td>853643</td>\n",
       "      <td>13/11/2017</td>\n",
       "      <td>20/11/2017</td>\n",
       "      <td>7</td>\n",
       "      <td>115</td>\n",
       "      <td>809</td>\n",
       "      <td>4</td>\n",
       "      <td>38860</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Contoso</td>\n",
       "      <td>Econômico</td>\n",
       "      <td>20,34</td>\n",
       "      <td>39,9</td>\n",
       "      <td>Acessório para Computador</td>\n",
       "      <td>Loja Contoso New York No.1</td>\n",
       "      <td>anne5@adventure-works.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980641</th>\n",
       "      <td>903958</td>\n",
       "      <td>02/12/2017</td>\n",
       "      <td>02/12/2017</td>\n",
       "      <td>0</td>\n",
       "      <td>222</td>\n",
       "      <td>1435</td>\n",
       "      <td>10</td>\n",
       "      <td>815</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>The Phone Company</td>\n",
       "      <td>Regular</td>\n",
       "      <td>134,74</td>\n",
       "      <td>293</td>\n",
       "      <td>Smartphone</td>\n",
       "      <td>Loja Contoso Roma</td>\n",
       "      <td>ekorneevmm@instagram.com</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>980642 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Numero da Venda Data da Venda Data do Envio  ID Canal  ID Loja  \\\n",
       "0                     1    01/01/2017    02/01/2017         1       86   \n",
       "1                880458    23/11/2017    23/11/2017         0      306   \n",
       "2                191019    20/03/2017    21/03/2017         1      172   \n",
       "3                 18610    08/01/2017    10/01/2017         2      200   \n",
       "4                287704    23/04/2017    26/04/2017         3       76   \n",
       "...                 ...           ...           ...       ...      ...   \n",
       "980637           878244    23/11/2017    23/11/2017         0      110   \n",
       "980638           920243    09/12/2017    10/12/2017         1      261   \n",
       "980639           467482    21/06/2017    25/06/2017         4      115   \n",
       "980640           853643    13/11/2017    20/11/2017         7      115   \n",
       "980641           903958    02/12/2017    02/12/2017         0      222   \n",
       "\n",
       "        ID Produto  ID Promocao  ID Cliente  Quantidade Vendida  \\\n",
       "0              981            2        6825                   9   \n",
       "1              235           10        6825                   8   \n",
       "2              376            2        6825                   9   \n",
       "3              448            2        6825                  48   \n",
       "4              280            1        6825                  10   \n",
       "...            ...          ...         ...                 ...   \n",
       "980637         889            4         347                  12   \n",
       "980638        1367            5       38781                  13   \n",
       "980639         269            1         553                  10   \n",
       "980640         809            4       38860                   6   \n",
       "980641        1435           10         815                   8   \n",
       "\n",
       "        Quantidade Devolvida         Nome da Marca       Tipo Custo Unitario  \\\n",
       "0                          1              A. Datum    Regular          86,68   \n",
       "1                          0               Litware    Regular         264,72   \n",
       "2                          0       Adventure Works    Regular         195,24   \n",
       "3                          0  Wide World Importers  Econômico          137,6   \n",
       "4                          0               Contoso    Regular         167,73   \n",
       "...                      ...                   ...        ...            ...   \n",
       "980637                     1               Contoso  Econômico          25,49   \n",
       "980638                     0               Contoso    Regular          16,55   \n",
       "980639                     0               Contoso    Regular         208,52   \n",
       "980640                     0               Contoso  Econômico          20,34   \n",
       "980641                     0     The Phone Company    Regular         134,74   \n",
       "\n",
       "       Preco Unitario                        Categoria  \\\n",
       "0               188,5                   Câmera Digital   \n",
       "1                 799                     Home Theater   \n",
       "2              382,95                           Laptop   \n",
       "3               269,9                          Desktop   \n",
       "4                 329                     Home Theater   \n",
       "...               ...                              ...   \n",
       "980637             50        Acessório para Computador   \n",
       "980638          35,99  Telefone para Casa & Escritório   \n",
       "980639            409                     Home Theater   \n",
       "980640           39,9        Acessório para Computador   \n",
       "980641            293                       Smartphone   \n",
       "\n",
       "                       Nome da Loja            E-mail do Cliente  \n",
       "0              Loja Contoso Austin        rbrumfieldmy@ameblo.jp  \n",
       "1       Loja Contoso Europe Online        rbrumfieldmy@ameblo.jp  \n",
       "2            Loja Contoso Hartford        rbrumfieldmy@ameblo.jp  \n",
       "3             Loja Contoso Catalog        rbrumfieldmy@ameblo.jp  \n",
       "4       Loja Contoso Beaumont No.1        rbrumfieldmy@ameblo.jp  \n",
       "...                             ...                          ...  \n",
       "980637        Loja Contoso Orlando            edowner9m@imdb.com  \n",
       "980638  Loja Contoso Damascus No.1   ruben31@adventure-works.com  \n",
       "980639  Loja Contoso New York No.1    akuhnertfc@themeforest.net  \n",
       "980640  Loja Contoso New York No.1     anne5@adventure-works.com  \n",
       "980641           Loja Contoso Roma      ekorneevmm@instagram.com  \n",
       "\n",
       "[980642 rows x 17 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "karen33@adventure-works.com       77\n",
       "chloe77@adventure-works.com       74\n",
       "julia43@adventure-works.com       69\n",
       "destiny66@adventure-works.com     68\n",
       "gilbert9@adventure-works.com      68\n",
       "                                  ..\n",
       "isabella51@adventure-works.com     1\n",
       "wdalescoci@pbs.org                 1\n",
       "kbroggelliin@rakuten.co.jp         1\n",
       "connor15@adventure-works.com       1\n",
       "ekorneevmm@instagram.com           1\n",
       "Name: E-mail do Cliente, Length: 38907, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "#às vezes precisaremos mudar o encoding. Possiveis valores para testar:\n",
    "#encoding='latin1', encoding='ISO-8859-1', encoding='utf-8' ou então encoding='cp1252'\n",
    "vendas_df = pd.read_csv(r'Contoso - Vendas  - 2017.csv', sep=';') # coloca o r de leitura ou o caminho inteiro do arq.\n",
    "produtos_df = pd.read_csv(r'Contoso - Cadastro Produtos.csv', sep=';')\n",
    "lojas_df = pd.read_csv(r'Contoso - Lojas.csv', sep=';')\n",
    "clientes_df = pd.read_csv(r'Contoso - Clientes.csv', sep=';')\n",
    "\n",
    "#para tirar dados da minha tabela posso usar o drop\n",
    "# cliente_df = cliente_df.drop(['nome',\"nome\"] , axis=1) tira a coluna. axis = 0 é linha.\n",
    "#limpando apenas as colunas que queremos: ou usar o drop para eliminar o que nao quer.\n",
    "clientes_df = clientes_df[['ID Cliente', 'E-mail']]\n",
    "#produtos_df = produtos_df[['ID Produto', 'Nome do Produto']]\n",
    "lojas_df = lojas_df[['ID Loja', 'Nome da Loja']]\n",
    "\n",
    "#usaremos o display para ver todos os dataframes\n",
    "#mesclando e renomeando os dataframes\n",
    "vendas_df = vendas_df.merge(produtos_df, on='ID Produto')\n",
    "vendas_df = vendas_df.merge(lojas_df, on='ID Loja')\n",
    "vendas_df = vendas_df.merge(clientes_df, on='ID Cliente').rename(columns={'E-mail': 'E-mail do Cliente'})\n",
    "display(vendas_df) #para mostrar na tela\n",
    "\n",
    "frequencia_clientes = vendas_df['E-mail do Cliente'].value_counts()\n",
    "display(frequencia_clientes)\n",
    "frequencia_clientes[:5].plot(figsize=(15, 5), yticks=range(0, 100, 5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c72bfb59",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4e08a95",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
